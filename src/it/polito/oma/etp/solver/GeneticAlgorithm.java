package it.polito.oma.etp.solver;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.Random;
import java.util.concurrent.ThreadLocalRandom;
import java.util.stream.IntStream;

import javax.imageio.metadata.IIOInvalidTreeException;
import javax.lang.model.type.UnionType;
import javax.print.attribute.standard.RequestingUserName;

import it.polito.oma.etp.reader.InstanceData;
import it.polito.oma.etp.solver.initialization.InitializationSolution;
import it.polito.oma.etp.solver.optimization.OptimizationSolution;

public class GeneticAlgorithm {
	protected TsSettings tbSettings;
	protected GaSettings gaSettings;
	protected InstanceData instance;
	
	public GeneticAlgorithm(TsSettings tbSettings, GaSettings gaSettings, InstanceData instance) {
		this.tbSettings = tbSettings;
		this.gaSettings = gaSettings;
		this.instance = instance;
	}

	public Solution solve() {
		// Population generation
		Population population = new Population(instance, gaSettings, tbSettings);
		
		/*	it's very important that the population is orderd in order to 
		 * 	select the correct parents that will generate childrens.
		 */
		Collections.sort(population.getPopulation());
		
		/*TODO debug*/ System.out.println("Population: " +Arrays.toString(population.getPopulation().toArray()));
		
		//while(...) {
			// ***** Parents selection (for children generation) *********
		
			/* parents:	array list that contains the parents that will generate childrens.
			 * 			the size of the array depens on the numberOfReproductiveParents
			 * 			of the GASettings
			 */
			ArrayList<Solution> parents = new ArrayList();
			
			// Random parent selection using the Cumulative Reproduction Probability
			if(gaSettings.randomParentSelection) {				
				double[] CRP = generateCRP(population);
				//for(int i = 0; i < gaSettings.numberOfReproductiveParents; i++)
				//	parents.add(selectRandomParent(CRP, population));
				parents = selectRandomParent(CRP, population, gaSettings.numberOfReproductiveParents);
						
				/*TODO debug*/ System.out.println("Parents: "+parents);
			}
			// Deterministic parent selection using their fitness
			else {
				// Best parents (having a low fitness value) are selected for reproduction 
				for(int i = 0; i < gaSettings.numberOfReproductiveParents; ++i)
					parents.add(population.getPopulation().get(i));
			}
			
			// Crossover (generating new children)
			/* TODO test the ordered crossover*/
			
			ArrayList<Solution> childrens = new ArrayList<Solution>();
			childrens.add(crossover(parents.get(0), parents.get(1)));
			childrens.add(crossover(parents.get(1), parents.get(0)));

			// Chromosomes substitution (which chromosome survives)
			double[] CKP = generateCKP(population);
			
		//} // while end
		
		// TODO complete
		return null;
	}
	
	/*
	 * ***************must be tested!!!*********************
	 * 
	 * the first parent give the genes inside the cutting points, the secondo 
	 * is scanned in order to implement the oredered corossover.
	 * 
	 * @param parent1 the parent that give the genes inside the cutting points
	 * @param parent2 the parent that is scanned in order to implement the oredered corossover.
	 * @return children the children generated by the algorithm.
	 */
	public Solution crossover(Solution parent1, Solution parent2) {
		// initialization of the children and it's schedule
					Solution children = null;
					int[] childrenSchedule = new int[instance.getE()];

					if(!gaSettings.randomCuttingPoint) { // in case we select a deterministic cutting points
						int[] parentSchedule1 = parent1.schedule;
						int[] parentSchedule2 = parent2.schedule;
						
						//setting the part of the children schedule that is equal to the parent schedule part
						for (int i = gaSettings.whereToCut[0]; i <= gaSettings.whereToCut[1]; i++) {
							childrenSchedule[i] = parentSchedule1[i];
						}
						
						
						// the starting point is the first exam after the biggest cutting point.
						// the wheretoCut array must be ordered.
						
						//children 1 generation -> we use parent 2!
						int startingExam = gaSettings.whereToCut[1]+1; 
						int exam = startingExam;
						int childrenExamToSet = startingExam;
							do {
								   int parentTimeSlot = parentSchedule2[exam];
								   
								   //if it isn't an initialization problem we have to check the 
								   //feasibility of the move
								   if(!gaSettings.initializationProblem) { 
									  if(checkFeasibility(parentTimeSlot, exam, childrenSchedule)) {
										  //we update the children schedule only if it is feasible
										  //considering the current exam already set.
										  childrenSchedule[childrenExamToSet] = parentTimeSlot;
										  //we increment childrenExamToSet here 
										  //because if this exam generate an infeasible solution we have to 
										  //try with the next exam of the parent in order to set the current
										  //exam of the children that isn't set jet.
										  childrenExamToSet++;
										  	if(childrenExamToSet>=instance.getE()) childrenExamToSet = 0;
									  }
								   }
								   else { // this is the case of INITIALIZATION PROBLEM
									   	  // simple crossover -> we haven't to check the feasibility
									   	  // so we always set the exam 
										childrenSchedule[childrenExamToSet] = parentTimeSlot;
									   	childrenExamToSet++;
									  	if(childrenExamToSet>=instance.getE()) childrenExamToSet = 0;
								   }
								   
								   exam++; // the next exam of the parent
								   if(exam == instance.getE()) exam = 0;
								   
						    // continue until all exams are scheduled in the children schedule
							} while(childrenExamToSet != gaSettings.whereToCut[0]);
			
						if(childrenExamToSet<gaSettings.whereToCut[0]) {
							System.err.println("children not completely setted!!!");
							System.exit(0);
						}
						/*TODO debug*/else System.out.println("children1 schedule= "+Arrays.toString(childrenSchedule));
						/*TODO debug*/ 
						for (int i = gaSettings.whereToCut[0]; i <= gaSettings.whereToCut[1]; i++) {
							//they must be equal!!!!!!!!!!!!!!
							System.out.println("parent exam = "+i+" time slot = "+parentSchedule1[i]);
							System.out.println("parent exam = "+i+" time slot = "+childrenSchedule[i]);

						}
					}
					else {
						// in case we select a random cutting points generation
					}
					int[][] te = generateTe(childrenSchedule);
					   if(!gaSettings.initializationProblem)
						   children = new OptimizationSolution(instance, te);
					   else
						   children = new InitializationSolution(instance, te);
	
				return children;
	}				 
		
	
	/*
	 * generate the te matrix starting from the schedule
	 * @param schedule
	 */
	private int[][] generateTe(int[] schedule){
		int[][] te = new int[instance.getTmax()][instance.getE()];
			for (int exam = 0; exam < instance.getE(); exam++) {
				te[schedule[exam]][exam] = 1;
			}		
		return te;
		}
	
	/*
	 * it's used to check if the exam that we wont to put in the time slot given as
	 * parameter is a feasible move considering the actual childrenschedule setted
	 * so far.
	 * 
	 * @param TimeSlot	the time slot we wont to use for the exam given by currentExam param
	 * @param currentExam we are setting the children schedule, and this is the current exam
	 * 		              we wont to schedule
	 * @param childrenSchedule	the childrenSchedule that dynamically change by inserting 
	 * 						    exams in the order given by it's parent.
	 * 
	 * @return isFeasible true if we can put the currentExam in the TimeSlot given by param
	 */
	
	private boolean checkFeasibility(int TimeSlot, int currentExam, int[] childrenSchedule) {
		boolean isFeasible = true;
		
		int startingExam = gaSettings.whereToCut[0]; 
		int exam = startingExam;
		
			do {
				   if(instance.getN()[currentExam][exam]>0 && 
					  TimeSlot == childrenSchedule[exam])
					   isFeasible = false;
				   exam++;
				   if(exam == instance.getE()) exam = 0;

			} while(exam != startingExam && !isFeasible);
		
		return isFeasible;
	}

	
	/** (tested)
	 * Returns the Cumulative Reproduction Probability of each element of the population.
	 * 
	 * EXAMPLE:
	 * 
	 * 			FITNESS		PERCENTAGE FIT  		     	  		  CRP
	 * 			   8	    (1/8) / 1/8+1/7+1/8+1/8		    (1/8) / 1/8+1/7+1/8+1/8
	 * 			   7	    (1/7) / 1/8+1/7+1/8+1/8      (1/8 + 1/7) / 1/8+1/7+1/8+1/8
	 * 			   8	    (1/8) / 1/8+1/7+1/8+1/8     (1/8 + 1/7 + 1/8) / 1/8+1/7+1/8+1/8
	 * 			   8	    (1/8) / 1/8+1/7+1/8+1/8 				   1		
	 * 
	 * 
	 * @param 		the population of which we'll calculate the relative fitness.
	 * @return		Cumulative Reproduction Probability of each element of the population.
	 */
	private double[] generateCRP(Population population) {
		double[] CRP = new double[gaSettings.initialPopulationSize];
		
		double cumulativeInverseSum = 0;
		for(int i = 0; i < population.getPopulation().size() - 1; ++i) {
			cumulativeInverseSum += 1 / population.getPopulation().get(i).getFitness();
			CRP[i] = cumulativeInverseSum / population.getTotalInverseFitness();
		}
		CRP[population.getPopulation().size() - 1] = 1;
		
		/*TODO debug*/System.out.println("CRP: "+Arrays.toString(CRP));
		
		return CRP;
	}
	
	/** (TODO test)
	 * Cumulative Killing Probability generator function, starting from a given population.
	 * @param population	population 
	 * @return
	 */
	private double[] generateCKP(Population population) {
		double[] CKP = new double[gaSettings.initialPopulationSize];
		
		double cumulativeSum = 0;
		for(int i = 0; i < population.getPopulation().size() - 1; ++i) {
			cumulativeSum += population.getPopulation().get(i).getFitness();
			CKP[i] = cumulativeSum / population.getTotalFitness();
		}
		CKP[population.getPopulation().size() - 1] = 1;
		
		/*TODO debug*/System.out.println("CKP: "+Arrays.toString(CKP));
		
		return CKP;
	}
	
	/*(tested)
	 * in order to select a parent accordingly with a probability we
	 * use the range between consecutive values of CRP
	 */
	
	private ArrayList<Solution> selectRandomParent(double[] relativeFitness, Population population, int numberOfParents) {
		
		ArrayList<Solution> parents = new ArrayList();
		
		// to avoid the selection of the same parents
		Integer[] selectedNum = new Integer[numberOfParents];
		int numberOfSelectedParents = 0;
		
		// already selected numbers
		// generate a random number in the range [0,1]
		Random rnd = new Random();
		
		while (numberOfSelectedParents!=numberOfParents) {
			// Returns the next pseudorandom, uniformly distributed double value between 0.0 and 1.0 
			double randomNum = rnd.nextDouble();
			
			/*
			 * example:  CRP= [0,26; 0,48; 0,78; 1]
			 * 			 if the random value is 0,3
			 * 				 -> we select the second element of population
			 */
			if(randomNum <= relativeFitness[0] &&
					!Arrays.asList(selectedNum).contains(1)) {
						parents.add(population.getPopulation().get(0));
						//update the selected numbers in order to avoid to select same parents
						selectedNum[numberOfSelectedParents] = 1;
						numberOfSelectedParents++;
			}
			else
				for (int i = 1; i < relativeFitness.length; i++) {
					if(randomNum <= relativeFitness[i] 
							&& randomNum>relativeFitness[i-1] 
									&& !Arrays.asList(selectedNum).contains(i+1)) {						
											parents.add(population.getPopulation().get(i));	
											//update the selected numbers in order to avoid to select same parents
											selectedNum[numberOfSelectedParents] = i+1;
											numberOfSelectedParents++;
										}
				}
		}
		
		return parents;
	}
	
	private Solution selectRandomVictimChromosome() {
		Solution victim = null;
		
		
		
		return null;
	}
}
























